#+property: header-args    :results silent
* Programming-related packages
** Install =lsp=
   #+begin_src emacs-lisp
     (defun rp/setup-lsp-mode()
       (progn
	 (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	 (lsp-headerline-breadcrumb-mode)
	 (setq-mode-local prog-mode
			  create-lockfiles nil
			  make-backup-files nil)
	 (message "Variables create-lockfiles and make-backup-files are set to nil in prog-mode.")))

     (use-package lsp-mode
       :ensure t
       :commands (lsp lsp-deferred)
       :hook ((prog-mode . lsp)
	      (lsp-mode . rp/setup-lsp-mode))
       :init (setq lsp-keymap-prefix "C-c l")
       :config (lsp-enable-which-key-integration t))

     (use-package lsp-ui
       :ensure t
       :config
       (setq lsp-ui-doc-max-height 20
	     lsp-ui-doc-max-width 50
	     lsp-ui-sideline-ignore-duplicate t
	     lsp-ui-peek-always-show t)
       :commands lsp-ui-mode)

     (use-package helm-lsp
       :ensure t
       :commands helm-lsp-workspace-symbol)

     (use-package company-lsp
       :disabled
       :ensure t
       :commands (company-lsp))
   #+end_src
** Install =dap-mode=
   #+begin_src emacs-lisp
     (use-package dap-mode
       :ensure t
       :after lsp-mode
       :config (dap-auto-configure-mode))
   #+end_src
** Install =flycheck=
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :defer t
       :init (global-flycheck-mode))
   #+end_src
** Install =smartparens=
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure t
       :diminish smartparens-mode
       :config
       (add-hook 'prog-mode-hook 'smartparens-mode))
   #+end_src
** Install =yaml-mode=
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :ensure t)
   #+end_src
** Install =rainbow-delimiters= for improved readability
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+end_src
** Install =treemacs=
   =Treemacs= configuration copied from [[https://github.com/Alexander-Miller/treemacs#installation][=Installation=]] section of the package GitHub page.
   #+begin_src emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t
       :config
       (progn
	 (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	       treemacs-deferred-git-apply-delay        0.5
	       treemacs-directory-name-transformer      #'identity
	       treemacs-display-in-side-window          t
	       treemacs-eldoc-display                   t
	       treemacs-file-event-delay                5000
	       treemacs-file-extension-regex            treemacs-last-period-regex-value
	       treemacs-file-follow-delay               0.2
	       treemacs-file-name-transformer           #'identity
	       treemacs-follow-after-init               t
	       treemacs-expand-after-init               t
	       treemacs-git-command-pipe                ""
	       treemacs-goto-tag-strategy               'refetch-index
	       treemacs-indentation                     2
	       treemacs-indentation-string              " "
	       treemacs-is-never-other-window           nil
	       treemacs-max-git-entries                 5000
	       treemacs-missing-project-action          'ask
	       treemacs-move-forward-on-expand          nil
	       treemacs-no-png-images                   nil
	       treemacs-no-delete-other-windows         t
	       treemacs-project-follow-cleanup          nil
	       treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	       treemacs-position                        'left
	       treemacs-read-string-input               'from-child-frame
	       treemacs-recenter-distance               0.1
	       treemacs-recenter-after-file-follow      nil
	       treemacs-recenter-after-tag-follow       nil
	       treemacs-recenter-after-project-jump     'always
	       treemacs-recenter-after-project-expand   'on-distance
	       treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	       treemacs-show-cursor                     nil
	       treemacs-show-hidden-files               t
	       treemacs-silent-filewatch                nil
	       treemacs-silent-refresh                  nil
	       treemacs-sorting                         'alphabetic-asc
	       treemacs-select-when-already-in-treemacs 'move-back
	       treemacs-space-between-root-nodes        t
	       treemacs-tag-follow-cleanup              t
	       treemacs-tag-follow-delay                1.5
	       treemacs-user-mode-line-format           nil
	       treemacs-user-header-line-format         nil
	       treemacs-width                           35
	       treemacs-width-is-initially-locked       t
	       treemacs-workspace-switch-cleanup        nil)

	 ;; The default width and height of the icons is 22 pixels. If you are
	 ;; using a Hi-DPI display, uncomment this to double the icon size.
	 ;;(treemacs-resize-icons 44)

	 (treemacs-follow-mode t)
	 (treemacs-filewatch-mode t)
	 (treemacs-fringe-indicator-mode 'always)

	 (pcase (cons (not (null (executable-find "git")))
		      (not (null treemacs-python-executable)))
	   (`(t . t)
	    (treemacs-git-mode 'deferred))
	   (`(t . _)
	    (treemacs-git-mode 'simple))))
       :bind
       (:map global-map
	     ("M-0"       . treemacs-select-window)
	     ("C-x t 1"   . treemacs-delete-other-windows)
	     ("C-x t t"   . treemacs)
	     ("C-x t B"   . treemacs-bookmark)
	     ("C-x t C-t" . treemacs-find-file)
	     ("C-x t M-t" . treemacs-find-tag)))

     (use-package treemacs-projectile
       :after (treemacs projectile)
       :ensure t)

     (use-package treemacs-icons-dired
       :after (treemacs dired)
       :ensure t
       :config (treemacs-icons-dired-mode))

     (use-package treemacs-magit
       :after (treemacs magit)
       :ensure t)
   #+end_src
* Programming mode(s) tweaks
** Enable line numbers
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** Highlight current line
   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook 'hl-line-mode)
   #+end_src
** Enable =subword-mode=
   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook 'subword-mode)
   #+end_src
** Expand parentheses
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'electric-pair-mode)
   #+END_SRC
* C# development
** Install =csharp-mode=

   For some reason I get the following error when running Emacs under Ubuntu Bash for Windows:

   #+begin_quote
   Error (use-package): csharp-mode/:init: Symbol's function definition is void: electric-pair-local-mode.
   #+end_quote

    As a workaround disable =electric-pair-mode= when =display-graphic-p= returns =nil=.

   #+begin_src emacs-lisp
     (use-package csharp-mode
       :ensure t
       :defer t
       :init (when (display-graphic-p)
		 (electric-pair-local-mode 1)))
   #+end_src

* PHP Development

  According to the [[https://github.com/emacs-php/php-mode#avoid-html-template-compatibility][documentation]] =php-mode= behaves weird when working with scripts that contain HTML code and suggests using [[https://github.com/fxbois/web-mode][=web-mode=]] for such cases.

** Install =php-mode=

   Although behaving weird, I'm not ready to uninstall =php-mode= yet so just disable it.

   #+begin_src emacs-lisp
     (use-package php-mode
       :ensure t
       :disabled t
       :defer t)
   #+end_src

** Install =web-mode=

   +Stolen from+ Inspired by [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#php][=web-mode= configuration of ~angrybacon~]] with mode-specification changed.

   #+begin_src emacs-lisp
     (use-package web-mode
       :mode "\\.php\\'"
       :hook
       (web-mode . sgml-electric-tag-pair-mode)
       :custom
       (web-mode-code-indent-offset 2)
       (web-mode-enable-auto-opening nil)
       (web-mode-enable-auto-pairing nil)
       (web-mode-enable-auto-quoting nil)
       (web-mode-markup-indent-offset 2)
       (web-mode-enable-auto-indentation nil))
   #+end_src

* Working with =Docker=
** Install =dockerfile-mode=

   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :ensure t)
   #+end_src

** Install =docker-compose-mode=

   #+begin_src emacs-lisp
     (use-package docker-compose-mode
       :ensure t)
   #+end_src

* Python development
  =lsp= setup is from [[https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package][LSP-mode page]]. Some tricks are adapted from [[https://realpython.com/blog/python/emacs-the-best-python-editor/][Emacs - the best Python editor]].
** Install =pyvenv=
   #+BEGIN_SRC emacs-lisp
     (use-package pyvenv
       :defer t
       :ensure t
       :config (progn
		 (add-hook 'pyvenv-post-activate-hooks 'pyvenv-restart-python)))
   #+END_SRC
** Install =py-yapf=
   #+begin_src emacs-lisp
     (use-package py-yapf
       :ensure t
       :defer t
       :commands (py-yapf-buffer py-yapf-enable-on-save))
   #+end_src
** Install =lsp-python-ms=
   #+BEGIN_SRC emacs-lisp
       (use-package lsp-python-ms
	 :ensure t
	 :init (setq lsp-python-ms-auto-install-server t)
	 :hook (python-mode . (lambda ()
				(py-yapf-enable-on-save)
				(require 'lsp-python-ms)
				(lsp))))  ; or lsp-deferred
   #+END_SRC emacs-lisp
* JavaScript development
** Install =rjsx-mode=
   #+begin_src emacs-lisp :results silent
     (use-package rjsx-mode
       :ensure t
       :mode "\\.js\\'")
   #+end_src
** Intall =prettier-js=
   Requires =sudo apt install prettier= or =npm install -g prettier=.
   #+begin_src emacs-lisp :results silent
     (use-package prettier-js
       :ensure t
       :after (rjsx-mode)
       :hook (rjsx-mode . prettier-js-mode))
   #+end_src
* XML
** Configure =nxml-mode=

   The =nxml-mode= is preinstalled with Emacs; to configure it I copied the [[https://github.com/rememberYou/.emacs.d/blob/master/config.org#xml][configuration from ~rememberYou~]].

   #+begin_src emacs-lisp
     (use-package nxml-mode
       :ensure nil
       :hook (nxml-mode . lsp-deferred)
       :mode ("\\.\\(xml\\|xsd\\|wsdl\\)\\'"))
   #+end_src
* YAML

  Github uses =yaml= files for configuring =Github Actions= so from time to time I have to work with =yaml=.

** Install =yaml-mode=

   Once again this snippet was copied from the [[https://github.com/rememberYou/.emacs.d/blob/master/config.org#yaml][configuration of ~rememberYou~]].

   #+begin_src emacs-lisp
     (use-package yaml-mode
       :hook (yaml-mode . lsp-deferred)
       :mode ("\\.\\(yaml\\|yml\\)\\'"))
   #+end_src

* SQL

  For working with =SQL= scripts use the packages from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org#sql][configuration of ~rememberYou~]].

** Install =sql-mode=

   #+begin_src emacs-lisp
     (use-package sql-mode
       :ensure t
       :mode "\\.sql\\'")
   #+end_src

** Install =sql-indent=

   #+begin_src emacs-lisp
     (use-package sql-indent
       :hook (sql-mode . sqlind-minor-mode))
   #+end_src
