* Open GTD view
** Setup ~org-capture~
   #+BEGIN_SRC emacs-lisp
     (setq org-default-notes-file "~/org/notes.org")
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC
** Setup ~org-capture-templates~
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
	   '(("t" "Todo [inbox]" entry (file+headline "~/org/gtd/inbox.org" "Tasks") "* TODO %i%?")
	     ("j" "Journal Entry" entry (file+olp+datetree "~/org/journal.org") "* %?")
	     ("b" "Blog article idea" entry (file+headline "~/org/blogging.org" "Blog articles") "* IDEA %? \n %U")
	     ("T" "Tickler" entry (file+headline "~/org/gtd/tickler.org" "Tickler") "* %i%? \n %U")
	     ("w" "Work related items")
	     ("wa" "Work achievement" entry (file+olp+datetree "~/org/work/performance-review.org") "* %?")
	     ("wf" "Technical feedback for a colleague" entry (file+olp+datetree "~/org/work/technical-remarks.org" "Technical Feedback") "* %?")
	     ("wt" "Todo item" entry (file+headline "~/org/gtd/gtd.org" "Work") "* TODO %? %(org-set-tags \"WORK\")")
	     ("wr" "Retrospective remark" entry (file+headline "~/org/work/web-agenda/cemetery-web-agenda.org" "Upcomming retrospective") "* %? \n %U")))
   #+END_SRC
** Setup ~org-refile-targets~
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '(("~/org/gtd/gtd.org" :maxlevel . 3)
				("~/org/gtd/some-day.org" :level . 1)
				("~/org/gtd/tickler.org" :maxlevel . 2)
				("~/org/org/blogging.org" :level . 1)
				("~/org/bibliography/reading-list.org" :maxlevel  . 2)))
   #+END_SRC
  As found in this [[http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt][emacs init file]]. The full GTD workflow is explained int the [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][blog post]].
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-agenda-mode-hook 'hl-line-mode)

    (defun gtd()
      (interactive)
      (progn
        (find-file "~/org/gtd/gtd.org")
        (org-agenda-list)))

    (global-set-key (kbd "C-c g") 'gtd)
  #+END_SRC
* Agenda
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files
	  (quote ("~/org/gtd/inbox.org"
		  "~/org/gtd/gtd.org"
		  "~/org/gtd/some-day.org"
		  "~/org/gtd/tickler.org"
		  "~/org/bibliography/reading-list.org"
		  "~/org/blogging.org")))
    ;; (setq org-agenda-repeating-timestamp-show-all nil)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-skip-scheduled-if-done t)
  #+END_SRC
* Org mode
  #+begin_src emacs-lisp
    (use-package org
      :ensure org-plus-contrib
      :config (progn
		(require 'ox-extra)
		(ox-extras-activate '(ignore-headlines))))
  #+end_src
** Setup =org-ref=
   As specified in [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref manual]].
   #+begin_src emacs-lisp
     (use-package org-ref
       :ensure t
       :init(progn
	      (defun my/org-ref-open-pdf-at-point ()
		"Open the pdf for bibtex key under point if it exists."
		(interactive)
		(let* ((results (org-ref-get-bibtex-key-and-file))
		       (key (car results))
		       (pdf-file (car (bibtex-completion-find-pdf key))))
		  (if (file-exists-p pdf-file)
		      (org-open-file pdf-file)
		    (message "No PDF found for %s" key))))

	      (setq reftex-default-bibliography '("~/org/bibliography/references.bib"))
	      ;; see org-ref for use of these variables
	      (setq org-ref-bibliography-notes "~/org/bibliography/notes.org"
		    org-ref-default-bibliography '("~/org/bibliography/references.bib")
		    org-ref-pdf-directory "~/org/bibliography/bibtex-pdfs/")

	      (setq bibtex-completion-bibliography "~/org/bibliography/references.bib"
		    bibtex-completion-library-path "~/org/bibliography/bibtex-pdfs"
		    bibtex-completion-notes-path "~/org/bibliography/helm-bibtex-notes")

	      (setq org-latex-pdf-process
		    '("pdflatex -interaction nonstopmode -output-directory %o %f"
		      "bibtex %b"
		      "pdflatex -interaction nonstopmode -output-directory %o %f"
		      "pdflatex -interaction nonstopmode -output-directory %o %f"))
	      (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
	      (require 'org-ref)))
   #+end_src
** Automatically export to pdf
   #+begin_src emacs-lisp
     (defun is-beamer-presentation()
       (save-excursion
	 (goto-char (point-min))
	 (search-forward-regexp "#\\+latex_class:[[:blank:]]+beamer")))

     (defun export-to-pdf-async()
       (when (equal major-mode 'org-mode)
	 (if (is-beamer-presentation)
	     (progn
	       (message "Current buffer is beamer presentation. Automatic export will use org-beamer-export-to-pdf.")
	       (org-beamer-export-to-pdf t))
	   (progn
	     (message "Automatic export will use org-latex-export-to-pdf.")
	     (org-latex-export-to-pdf t)))))

     (defun toggle-export-to-pdf-async ()
       (interactive)
       (if (memq 'export-to-pdf-async after-save-hook)
	   (progn
	     (remove-hook 'after-save-hook 'export-to-pdf-async t)
	     (message "Disabled automatic export to pdf for current buffer."))
	 (add-hook 'after-save-hook 'export-to-pdf-async t t)
	 (message "Enabled automatic export to pdf for current buffer.")))
   #+end_src
