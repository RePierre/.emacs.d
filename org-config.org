#+property: header-args :results silent
* Org mode
  :PROPERTIES:
  :header-args:emacs-lisp: :results none
  :END:
  #+begin_src emacs-lisp
    (use-package org
      :ensure org-contrib
      :config (progn
		(require 'ox-extra)
		(ox-extras-activate '(ignore-headlines))

		(require 'org-habit)
		(add-to-list 'org-modules 'org-habit)
		(setq org-todo-keyword-faces
		      '(("TODO" . (:foreground "GoldenRod" :weight bold))
			("STARTED" . (:foreground "SteelBlue" :weight bold))
			("READING" . (:foreground "SteelBlue" :weight bold))
			("WAITING" . (:foreground "IndianRed1" :weight bold))
			("DONE" . (:foreground "LimeGreen" :weight bold))))
		(setq org-adapt-indentation t)))
  #+end_src
** Setup =org-ref=
   As specified in [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref manual]].
   #+begin_src emacs-lisp
     (use-package helm-bibtex
       :ensure t
       :init
       (setq bibtex-completion-bibliography '("~/org/bibliography/references.bib")
	     bibtex-completion-library-path '("~/org/bibliography/bibtex-pdfs")
	     bibtex-completion-notes-path "~/org/bibliography/helm-bibtex-notes"
	     bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

	     bibtex-completion-additional-search-fields '(keywords)
	     bibtex-completion-display-formats
	     '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	       (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	       (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	       (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	       (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	     bibtex-completion-pdf-open-function
	     (lambda (fpath)
	       (call-process "open" nil 0 nil fpath))))

     (use-package org-ref
       :ensure t
       :init
       (require 'bibtex)
       (setq bibtex-autokey-year-length 4
	     bibtex-autokey-name-year-separator "-"
	     bibtex-autokey-year-title-separator "-"
	     bibtex-autokey-titleword-separator "-"
	     bibtex-autokey-titlewords 2
	     bibtex-autokey-titlewords-stretch 1
	     bibtex-autokey-titleword-length 5)
       (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
       (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
       (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
       (require 'org-ref-helm)
       (require 'org-ref-arxiv)
       (require 'org-ref-scopus)
       (require 'org-ref-wos))


     (use-package org-ref-helm
       :ensure nil
       :load-path (lambda()(expand-file-name "elpa/org-ref" user-emacs-directory))
       :init (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
		   org-ref-insert-cite-function 'org-ref-cite-insert-helm
		   org-ref-insert-label-function 'org-ref-insert-label-link
		   org-ref-insert-ref-function 'org-ref-insert-ref-link
		   org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))

   #+end_src
** Setup =org-cliplink=
   #+begin_src emacs-lisp
     (use-package org-cliplink
       :ensure t)
   #+end_src
** Automatically export to pdf
   #+begin_src emacs-lisp
     (defun is-beamer-presentation()
       (save-excursion
	 (goto-char (point-min))
	 (search-forward-regexp "#\\+latex_class:[[:blank:]]+beamer")))

     (defun beamer-export-to-pdf()
       (when (and (equal major-mode 'org-mode)
		  (is-beamer-presentation))
	 (progn
	       (message "Current buffer is beamer presentation. Automatic export will use org-beamer-export-to-pdf.")
	       (org-beamer-export-to-pdf t))))

     (defun export-to-pdf-async()
       (when (equal major-mode 'org-mode)
	 (progn
	   (message "Automatic export will use org-latex-export-to-pdf.")
	   (org-latex-export-to-pdf t))))

     (defun rp/toggle-export-to-pdf-async ()
       (interactive)
       (if (memq 'export-to-pdf-async after-save-hook)
	   (progn
	     (remove-hook 'after-save-hook 'export-to-pdf-async t)
	     (message "Disabled automatic export to pdf for current buffer."))
	 (add-hook 'after-save-hook 'export-to-pdf-async t t)
	 (message "Enabled automatic export to pdf for current buffer.")))

   #+end_src
** Automatically export to html
   #+begin_src emacs-lisp
     (defun rp/export-to-html-async()
       (when (equal major-mode 'org-mode)
	 (org-html-export-to-html t)))

     (defun rp/toggle-export-to-html-async()
       (interactive)
       (if (memq 'rp/export-to-html-async after-save-hook)
	   (progn
	     (remove-hook 'after-save-hook 'rp/export-to-html-async t)
	     (message "Disabled automatic export to HTML for current buffer."))
	 (progn
	   (add-hook 'after-save-hook 'rp/export-to-html-async t t)
	   (message "Enabled automatic export to HTML for current buffer."))))
   #+end_src

** Setup =org-bullets=

   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :when (display-graphic-p)
       :config
       (setq org-bullets-bullet-list '("∙"))
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+end_src

** Load =org-babel= languages

   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      (quote org-babel-load-languages)
      (quote ((emacs-lisp . t)
	      (dot . t)
	      (python . t)
	      (gnuplot . t)
	      (shell . t)
	      (org . t)
	      (latex . t))))

   #+end_src

** Install =org-re-reveal=

   #+begin_src emacs-lisp
     (use-package org-re-reveal
       :ensure t
       :defer t
       :config
       (progn
	 (setq org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")))
   #+end_src

* Open GTD view
  :PROPERTIES:
  :header-args:emacs-lisp: :results none
  :END:
** Setup =org-capture=
   #+BEGIN_SRC emacs-lisp
     (setq org-default-notes-file "~/org/notes.org")
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC
** Setup =org-capture-templates=

   Having all capture templates in a single place can get messy and makes them hard to understand, so it's better to have them split into categories.

   And to avoid duplicating the same code that appends new templates to existing ones, it's better to put that code into a function that can be called multiple times:
   #+BEGIN_SRC emacs-lisp
     (defun rp/add-org-capture-templates(capture-templates)
       (setq org-capture-templates
	     (append org-capture-templates
		     capture-templates)))
   #+END_SRC

   Now, all that's left to do is split templates into categories and add them using the function above.

*** Uncategorized templates

    Templates that do not have a category, i.e. are accessible via a single key.

    #+begin_src emacs-lisp
      (rp/add-org-capture-templates
       '(("n" "Note [inbox]"
	  entry
	  (file+headline "~/org/gtd/inbox.org" "Inbox")
	  "* %i%? \n  %U")

	 ("t" "Task [GTD]"
	  entry
	  (file+headline "~/org/gtd/gtd.org" "Tasks")
	  "* TODO %i%? \n  %U")

	 ("k" "Org-cliplink capture [inbox]"
	  entry
	  (file+headline "~/org/gtd/inbox.org" "Inbox")
	  "* %(org-cliplink-capture)")

	 ("j" "Journal Entry"
	  entry
	  (file+olp+datetree "~/org/journal.org")
	  "* %?")

	 ("b" "Blog article idea"
	  entry
	  (file+headline "~/org/blogging.org" "Blog articles")
	  "* IDEA %? \n %U")

	 ("T" "Tickler"
	  entry
	  (file+headline "~/org/gtd/tickler.org" "Tickler")
	  "* %i%? \n %U")))
    #+end_src

*** PhD related templates

    Templates related to my PhD activities.

    #+begin_src emacs-lisp
      (rp/add-org-capture-templates
       '(("p" "PhD related items")
	 ("pt" "Todo item"
	  entry
	  (file+headline "~/org/phd/phd.org" "PhD General")
	  "* TODO %?")

	 ("pm" "Meeting"
	  entry
	  (file+headline "~/org/phd/phd.org" "Calendar")
	  "* %? \n  %^{Slot}T")))
    #+end_src

*** Work related templates

    Templates related to work activities.

    #+begin_src emacs-lisp
      (rp/add-org-capture-templates
       '(("w" "Work related items")
	 ("wa" "Work achievement"
	  entry
	  (file+olp+datetree "~/org/gtd/work.org" "Achievements")
	  "* %?")

	 ("wf" "Technical feedback for a colleague"
	  entry
	  (file+olp+datetree "~/org/gtd/work.org" "Technical feedback")
	  "* %?")

	 ("wt" "Todo item"
	  entry
	  (file+headline "~/org/gtd/work.org" "Work")
	  "* TODO %? %(org-set-tags \"WORK\")")

	 ("wm" "Meeting"
	  entry
	  (file+headline "~/org/gtd/work.org" "Outlook")
	  "* %? %(org-set-tags \"WORK\") \n  %^{Slot}T")

	 ("wr" "Retrospective remark"
	  entry
	  (file+headline "~/org/gtd/work.org" "Upcomming retrospective")
	  "* TODO %? \n %U")

	 ("wj" "Journal Entry"
	  entry
	  (file+olp+datetree "~/org/gtd/work.org" "Journal")
	  "* %?")))
    #+end_src

*** Templates for interruptions

    Templates to capture interruptions of various sorts.

    #+begin_src emacs-lisp
      (rp/add-org-capture-templates
       '(("i" "Interruptions")
	 ("iw" "Work-related interruption"
	  entry
	  (file+headline "~/org/gtd/work.org" "Interruptions")
	  "* %? \n" :clock-in t)

	 ("ii" "Iaşi AI related interruption"
	  entry
	  (file+headline "~/org/iasi.ai/iasi-ai.org" "Orice Alte Chestiuni")
	  "* %? \n" :clock-in t)

	 ("ip" "PhD related interruption"
	  entry
	  (file+headline "~/org/phd/phd.org" "Întreruperi")
	  "* %? \n" :clock-in t)))
    #+end_src

** Setup =org-refile-targets=
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '(("~/org/gtd/gtd.org" :maxlevel . 3)
				("~/org/gtd/some-day.org" :level . 1)
				("~/org/gtd/tickler.org" :maxlevel . 2)
				("~/org/blogging.org" :level . 1)
				("~/org/gtd/work.org" :maxlevel . 6)
				("~/org/bibliography/reading-list.org" :maxlevel . 2)
				("~/org/phd/phd.org" :maxlevel . 4)
				("~/org/iasi.ai/iasi-ai.org" :level . 1)))
   #+END_SRC
  As found in this [[http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt][emacs init file]]. The full GTD workflow is explained int the [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][blog post]].
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-agenda-mode-hook 'hl-line-mode)

    (defun gtd()
      (interactive)
      (progn
	(find-file "~/org/gtd/gtd.org")
	(find-file "~/org/bibliography/reading-list.org")
	(org-agenda-list)))

    (global-set-key (kbd "C-c g") 'gtd)
  #+END_SRC
* Agenda

  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-files
	  (list "~/org/gtd/inbox.org"
		"~/org/gtd/gtd.org"
		"~/org/gtd/work.org"
		"~/org/gtd/some-day.org"
		"~/org/gtd/tickler.org"
		"~/org/gtd/events.org"
		"~/org/bibliography/reading-list.org"
		"~/org/blogging.org"
		"~/org/phd/phd.org"
		"~/org/iasi.ai/iasi-ai.org")
	  org-agenda-span 'day)
    ;; (setq org-agenda-repeating-timestamp-show-all nil)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-skip-scheduled-if-done t)
  #+END_SRC

** Define macro for displaying timestamps on workdays

   The following macro will allocate time slots for meetings that are recurring on work days (Monday to Friday).

   Usage example:
   #+begin_quote
   * Some meeting
     <%%(rp/workdays-at "8:30-9:00")>
   #+end_quote

   #+begin_src emacs-lisp
     (defmacro rp/on-days-at(days time-slot)
       `(if (memq (calendar-day-of-week date) ,days)
	    (format "%s %s"
		    (org-format-time-string "%y-%m-%d" (org-today))
		    ,time-slot)))

     (defmacro rp/workdays-at(time-slot)
       `(rp/on-days-at '(1 2 3 4 5) ,time-slot))
   #+end_src

* Effort estimates
  Setup [[https://orgmode.org/manual/Effort-Estimates.html][effort estimates]] for tasks. Adapted from [[https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html][Clocking time with Org-mode]].
  #+begin_src emacs-lisp
    (setq org-global-properties
	  '(("Effort_ALL" .
	     "0:10 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00 0:00")))


    (setq org-columns-default-format
	  "%38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}")
  #+end_src
* Install =org-roam=
  #+begin_src emacs-lisp
    (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/org/roam")
      :bind (("C-c n l" . org-roam-buffer-toggle)
	     ("C-c n f" . org-roam-node-find)
	     ("C-c n i" . org-roam-node-insert))
      :config
      (org-roam-setup))
  #+end_src
