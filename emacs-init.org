* Themes
  Use ~sanityinc-tomorrow-night~ when not running from console; otherwise fallback to ~wombat~.
  #+BEGIN_SRC emacs-lisp
    (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :when (display-graphic-p)
      :config (load-theme 'sanityinc-tomorrow-night t))
  #+END_SRC
** Use ~circadian~ to switch between dark and light themes
   #+begin_src emacs-lisp
     (use-package circadian
       :ensure t
       :when (display-graphic-p)
       :config
       (setq circadian-themes '(("8:00" . sanityinc-tomorrow-day)
				("19:30" . sanityinc-tomorrow-night)))
       (add-hook 'circadian-after-load-theme-hook
		 #'(lambda (theme)
		     (sml/apply-theme 'respectful)))
       (circadian-setup))
   #+end_src
* Install ~AUCTeX~
  #+BEGIN_SRC emacs-lisp
    ;; As described in https://github.com/jwiegley/use-package/issues/379
    ;; and also as found in https://www.reddit.com/r/emacs/comments/7ux1qj/using_auctex_mode_to_sync_latex_documents_and/dto2z02/
    (use-package tex-mode
      :defer t
      :ensure auctex
      :init (progn
	      (setq TeX-auto-save t)
	      (setq TeX-parse-self t)
	      (setq-default TeX-master nil)
	      (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		    TeX-source-correlate-start-server t)
	      (add-hook 'LaTeX-mode-hook 'visual-line-mode)
	      (add-hook 'LaTeX-mode-hook 'flyspell-mode)
	      (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
	      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
	      (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
	      (setq reftex-plug-into-AUCTeX t)))
  #+END_SRC
** Install ~company-auctex~
   #+begin_src emacs-lisp
     (use-package company-auctex
       :commands (company-auctex
		  company-auctext-labels
		  company-auctest-bibs
		  company-auctex-macros
		  company-auctext-symbols
		  company-auctext-environments)
       :defer t
       :hook
       (tex-mode . (lambda ()
		     (setq-local company-backends '((company-auctex-labels
						     company-auctex-bibs
						     company-auctex-macros
						     company-auctex-environments
						     company-auctex-symbols
						     company-capf))))))
   #+end_src
** Install ~company-math~
   #+begin_src emacs-lisp
     (use-package company-math
       :defer t
       :preface
       (autoload 'company-math-symbols-latex "company-math")
       (autoload 'company-latex-commands "company-math")
       :hook
       (TeX-mode . (lambda ()
		     (setq-local company-backends '((company-math-symbols-latex
						     company-latex-commands
						     company-capf))))))
   #+end_src
* Install ~graphviz-dot-mode~
  #+BEGIN_SRC emacs-lisp
    (use-package graphviz-dot-mode
      :ensure t
      :defer t)
  #+END_SRC
* Install ~beginend~
  #+BEGIN_SRC emacs-lisp
    (when (version<= "25.3" emacs-version)
      (use-package beginend
	:ensure t
	:defer t
	:init (beginend-global-mode)))
  #+END_SRC
* Install ~csharp-mode~
  For some reason I get the following error when running Emacs under Ubuntu Bash for Windows: ~Error (use-package): csharp-mode/:init: Symbol's function definition is void: electric-pair-local-mode~. As a workaround disable ~electric-pair-mode~ when ~display-graphic-p~ returns ~nil~.
  #+BEGIN_SRC emacs-lisp
    (use-package csharp-mode
      :ensure t
      :defer t
      :init (when (display-graphic-p)
		(electric-pair-local-mode 1)))
  #+END_SRC
* ~org2blog~ setup
  As seen on [[https://vxlabs.com/2014/05/25/emacs-24-with-prelude-org2blog-and-wordpress/][Publish to WordPress with Emacs 24 and org2blog]]. Also [[https://github.com/org2blog/org2blog][GitHub repo]] of the project.
  #+BEGIN_SRC emacs-lisp
    ;; (mapc #'(lambda (package)
    ;; 	  (unless (package-installed-p package)
    ;; 	    (package-install package)))
    ;;       '(xml-rpc metaweblog org2blog))

    ;; (setq org-list-allow-alphabetical t)
    ;; (require 'org2blog-autoloads)
    ;; (require 'auth-source)

    ;; (let (credentials)
    ;;   ;; only required if your auth file is not already in the list of auth-sources
    ;;   ;; (add-to-list 'auth-sources "~/.authinfo")
    ;;   (setq credentials (auth-source-user-and-password "repierre"))
    ;;   (setq org2blog/wp-blog-alist
    ;; 	`(("repierre"
    ;; 	   :url "https://repierre.wordpress.com/xmlrpc.php"
    ;; 	   :username ,(car credentials)
    ;; 	   :password ,(cadr credentials)))))

    ;; (setq org2blog/wp-use-sourcecode-shortcode 't)
    ;; (setq org2blog/wp-sourcecode-default-params nil)
    ;; (setq org2blog/wp-sourcecode-langs
    ;;       '("actionscript3" "bash" "coldfusion" "cpp" "csharp" "css" "delphi"
    ;; 	"erlang" "fsharp" "diff" "groovy" "javascript" "java" "javafx" "matlab"
    ;; 	"objc" "perl" "php" "text" "powershell" "python" "ruby" "scala" "sql"
    ;; 	"vb" "xml"
    ;; 	"sh" "emacs-lisp" "lisp" "lua"))
    ;; (setq org-src-fontify-natively t)
  #+END_SRC
* Install ~pdf-tools~
  ~use-package~ example configuring ~pdf-tools~ found [[https://github.com/abo-abo/hydra/wiki/PDF-Tools][here]].
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :defer t
      :config
      (pdf-tools-install)
      (setq-default pdf-view-display-size 'fit-page)
      (use-package org-pdfview
	:ensure t))
  #+END_SRC
* Install ~neotree~
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t
      :defer t
      :config
      (global-set-key (kbd "C-c t") 'neotree-toggle)
      (setq neo-smart-open t)
      (setq neo-theme 'arrow))
  #+END_SRC
* Install ~powershell~
  #+BEGIN_SRC emacs-lisp
    (use-package powershell
      :ensure t
      :defer t)
  #+END_SRC
* Install ~ledger-mode~
** Prerequisites
   Requires ~ledger~ to be installed:
   #+BEGIN_SRC shell
     sudo apt-get install ledger
   #+END_SRC
** Setup ~ledger-mode~
   #+BEGIN_SRC emacs-lisp
     (use-package ledger-mode
       :ensure t
       :defer t
       :config (progn
		 (setq ledger-reconcile-default-commodity "RON")
		 (setq ledger-schedule-file "~/org/financial/ledger-schedule.ledger")))
   #+END_SRC
* Read Web feeds using ~elfeed~
  Based on [[https://cestlaz.github.io/posts/using-emacs-29-elfeed/][blog post of Mike Zamansky]].
  #+BEGIN_SRC emacs-lisp
    (setq elfeed-db-directory "~/org/elfeed/elfeed-db")

    (defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))

    (defun elfeed-load-db-and-open ()
      "Wrapper to load the elfeed database from disk before opening."
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force))

    (defun elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed database to disk before burying buffer."
      (interactive)
      (elfeed-db-save)
      (quit-window))

    (use-package elfeed
      :ensure t
      :defer t
      :bind (:map elfeed-search-mode-map
		  ("q" . elfeed-save-db-and-bury)
		  ("A" . elfeed-mark-all-as-read)))

    (use-package elfeed-goodies
      :ensure t
      :defer t
      :config
      (elfeed-goodies/setup)
      (setq elfeed-goodies/entry-pane-position :bottom))

    (use-package elfeed-org
      :ensure t
      :defer t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/org/elfeed/elfeed.org")))
  #+END_SRC
* Install ~org-re-reveal~
  #+BEGIN_SRC emacs-lisp
    (use-package org-re-reveal
      :ensure t
      :defer t
      :config
      (progn
	(setq org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")))
  #+END_SRC
