* Basic customization
** Hide the startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** Load *gotham* theme
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'gotham-theme)
       (package-install  'gotham-theme))

     (load-theme 'gotham t)
   #+END_SRC
** Hide the toolbar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC
** Change ~yes or no~ prompts to ~y or n~
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Bind ~F5~ key to ~revert-buffer~
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC
** Enable line numbers for various modes
   #+BEGIN_SRC emacs-lisp
     ;; python-mode
     (add-hook 'python-mode-hook
               (lambda ()
                 (linum-mode)))

     ;; emacs-lisp mode
     (add-hook 'emacs-lisp-mode-hook
               (lambda ()
                 (linum-mode)))
   #+END_SRC
** Wrap long lines
   Found on a [[http://stackoverflow.com/a/3282132/844006][StackOverflow answer]].
   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode t)
   #+END_SRC
** Use ~ibuffer~ for buffer list
   As specified in the [[http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet][blog post]] of  Mike Zamansky.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     (setq ibuffer-saved-filter-groups
           (quote (("default"
                    ("dired" (mode . dired-mode))
                    ("org" (name . "^.*org$"))
                    ("web" (or (mode . web-mode)
                               (mode . js2-mode)))
                    ("shell" (or (mode . eshell-mode)
                                 (mode . shell-mode)))
                    ("programming" (or (mode . python-mode)
                                       (mode . lisp-mode)
                                       (mode . csharp-mode)
                                       (mode . js2-mode)))
                    ("doc-view" (mode . doc-view-mode))
                    ("magit" (name . "\*magit"))
                    ("latex" (mode . latex-mode))
                    ("emacs" (or (name . "^\\*scratch\\*$")
                                 (name . "^\\*Messages\\*$")))
                    ("helm" (mode . helm-major-mode))))))
     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "default")))

     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)
   #+END_SRC
** Replace highlighted text
   From [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Replacing-highlighted-text.html][Emacs manual]]:
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode 1)
   #+END_SRC
** Save contents of clipboard before killing text
   From [[https://www.reddit.com/r/emacs/comments/30g5wo/the_kill_ring_and_the_clipboard/cpsbbmb/][Reddit comment]]:
   #+BEGIN_SRC emacs-lisp
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC
** Open GTD view
*** Setup ~org-capture~
    #+BEGIN_SRC emacs-lisp
      (setq org-default-notes-file "~/Dropbox/org/notes.org")
      (global-set-key (kbd "C-c c") 'org-capture)
    #+END_SRC
*** Setup ~org-capture-templates~
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
	    '(("t" "Todo [inbox]" entry (file+headline "~/Dropbox/gtd/inbox.org" "Tasks") "* TODO %i%?")
	      ("j" "Journal Entry" entry (file+datetree "~/Dropbox/org/journal.org") "* %?" :empty-lines 1)
	      ("b" "Blog article idea" entry (file+headline "~/Dropbox/org/blogging.org" "Blog articles") "* IDEA %? \n %U")
	      ("T" "Tickler" entry (file+headline "~/Dropbox/gtd/tickler.org" "Tickler") "* %i%? \n %U")))
    #+END_SRC
*** Setup ~org-refile-targets~
    #+BEGIN_SRC emacs-lisp
      (setq org-refile-targets '(("~/Dropbox/gtd/gtd.org" :maxlevel . 3)
				 ("~/Dropbox/gtd/some-day.org" :level . 1)
				 ("~/Dropbox/gtd/tickler.org" :maxlevel . 2)
				 ("~/Dropbox/org/blogging.org" :level . 1)))
    #+END_SRC
   As found in this [[http://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt][emacs init file]]. The full GTD workflow is explained int the [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][blog post]].
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-agenda-mode-hook 'hl-line-mode)

     (defun gtd()
       (interactive)
       (progn
         (find-file "~/Dropbox/gtd/gtd.org")
         (org-agenda-list)))

     (global-set-key (kbd "C-c g") 'gtd)
   #+END_SRC
** Remove scratch message
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message "")
   #+END_SRC
** Run shell commands interactively when under Cygwin shell
   As found on [[https://emacs.stackexchange.com/a/10974/14110][StackExchange]]:
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'cygwin)
       (setq shell-file-name "bash")
       (setq shell-command-switch "-ic"))
   #+END_SRC
** ~dired~ tweaks
*** Set ~dired-dwim-target~
    #+BEGIN_SRC emacs-lisp
      (setq dired-dwim-target t)
    #+END_SRC
*** Human readable file sizes
    From [[http://pragmaticemacs.com/emacs/dired-human-readable-sizes-and-sort-by-size/][Pragmatic Emacs]].
    #+BEGIN_SRC emacs-lisp
      (setq dired-listing-switches "-alh")
    #+END_SRC
** End sentences with single space
   #+BEGIN_SRC emacs-lisp
     (setq sentence-end-double-space nil)
   #+END_SRC
** Display date and time in mode line
   #+BEGIN_SRC emacs-lisp
     (setq display-time-day-and-date t
           display-time-24hr-format t)
     (display-time-mode 1)
   #+END_SRC
** Turn off the error bell
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Expand region around the cursor semantically
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'expand-region)
       (package-install 'expand-region))

     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+END_SRC
** Install ~org-bullets~
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (setq org-bullets-bullet-list '("âˆ™"))
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
* Load ~org-babel~ languages
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     (quote org-babel-load-languages)
     (quote ((emacs-lisp . t)
             (dot . t)
             (python . t)
             (gnuplot . t)
             (sh . t)
             (org . t)
             (latex . t))))

  #+END_SRC
* Git integration
** Install ~magit~
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'magit)
       (package-install 'magit))
     (use-package magit
       :bind (("C-x g" . magit-status)))
   #+END_SRC
** Install ~magit-gh-pulls~
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'magit-gh-pulls)
       (package-install 'magit-gh-pulls))

     (use-package magit-gh-pulls
       :ensure t
       :init (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
   #+END_SRC
** Install ~git-timemachine~
   #+BEGIN_SRC emacs-lisp
     (use-package git-timemachine
       :ensure t)
   #+END_SRC
** Install ~git-gutter~
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :ensure t
       :config
       (global-git-gutter-mode t)
       :diminish git-gutter-mode)
   #+END_SRC
* Install ~helm~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'helm)
      (package-install 'helm))

    ;; A merge of configuration from Sacha Chua http://pages.sachachua.com/.emacs.d/Sacha.html and
    ;; other various sources
    (use-package helm
      :diminish helm-mode
      :init
      (progn
	(require 'helm-config)
	(setq helm-candidate-number-limit 100)
	;; From https://gist.github.com/antifuchs/9238468
	(setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
	      helm-input-idle-delay 0.01  ; this actually updates things
					    ; reeeelatively quickly.
	      helm-yas-display-key-on-candidate t
	      helm-quick-update t
	      helm-M-x-requires-pattern nil
	      helm-ff-skip-boring-files t)
	;; Configuration from https://gist.github.com/m3adi3c/66be1c484d2443ff835b0c795d121ee4#org3ac3590
	(setq helm-split-window-in-side-p t ; open helm buffer inside current window, not occupy whole other window
	      helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
	      helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.
	      helm-scroll-amount 8)	; scroll 8 lines other window using M-<next>/M-<prior>
	(helm-mode)
	(define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
	(define-key helm-read-file-map (kbd "TAB") 'helm-execute-persistent-action))
      :bind (("C-c h" . helm-mini)
	     ("C-h a" . helm-apropos)
	     ;; Play with ibuffer for now; maybe get back to this later
	     ;; ("C-x C-b" . helm-buffers-list)
	     ("C-x b" . helm-buffers-list)
	     ("M-y" . helm-show-kill-ring)
	     ("M-x" . helm-M-x)
	     ("C-x c o" . helm-occur)
	     ;; Need to install package; will do in another commit
	     ;; ("C-x c s" . helm-swoop)
	     ("C-x c y" . helm-yas-complete)
	     ("C-x c Y" . helm-yas-create-snippet-on-region)
	     ("C-x c SPC" . helm-all-mark-rings)
	     ("C-x C-f" . helm-find-files)))
  #+END_SRC
* Install ~smart-mode-line~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'smart-mode-line)
      (package-install 'smart-mode-line))

    (use-package smart-mode-line
      :ensure t
      :init
      (sml/setup))
  #+END_SRC
* Python development
  Follows some of the steps from [[https://realpython.com/blog/python/emacs-the-best-python-editor/][Real Python blog]].
** Install ~auto-complete~
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'auto-complete)
       (package-install 'auto-complete))

     (use-package auto-complete
       :config (progn
                 (ac-config-default)
                 (ac-set-trigger-key "TAB")
                 (ac-set-trigger-key "<tab>")))
   #+END_SRC
** Install ~elpy~
   Requires the installation of ~elpy, jedi, rope~:
   #+BEGIN_SRC sh
      sudo pip install elpy jedi rope
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'elpy)
       (package-install 'elpy))

     (elpy-enable)
   #+END_SRC
** Install ~flycheck~
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'flycheck)
       (package-install 'flycheck))

     (use-package flycheck
       :ensure t
       :init (when (require 'flycheck nil t)
               (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
               (add-hook 'elpy-mode-hook 'flycheck-mode)))
   #+END_SRC
** Install ~py-autopep8~
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'py-autopep8)
       (package-install 'py-autopep8))

     (use-package py-autopep8
       :ensure t
       :init (progn
               (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
               ;; Ignore warnings
               ;; - E501 - Try to make lines fit within --max-line-length characters.
               ;; - W293 - Remove trailing whitespace on blank line.
               ;; - W391 - Remove trailing blank lines.
               ;; - W690 - Fix various deprecated code (via lib2to3).
               ;; https://github.com/kpurdon/.emacs.d/blob/master/development/_python.el
               (setq py-autopep8-options '("--ignore=E501,W293,W391,W690"))))
   #+END_SRC
** Install ~RealGUD~
   [[https://github.com/realgud/realgud/][GitHub repository]].
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'realgud)
       (package-install 'realgud))

     (use-package realgud
       :ensure t)
   #+END_SRC
** Install ~smartparens~
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :diminish smartparens-mode
       :config
       (add-hook 'prog-mode-hook 'smartparens-mode))
   #+END_SRC
** Install ~rainbow-delimiters~ for improved readability
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
** Expand parentheses
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'electric-pair-mode)
   #+END_SRC
* Install ~ace-window~
  From [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#ace-windows-for-easy-window-switching][ace-window for easy window switching]]
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'ace-window)
      (package-install 'ace-window))

    (use-package ace-window
      :ensure t
      :init
      (progn
        (global-set-key (kbd "C-x o") 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
  #+END_SRC
* Markdown related packages
** Install ~markdown-mode~
   As specified in the [[http://jblevins.org/projects/markdown-mode/][documentation]].
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Install ~gh-md~
   #+BEGIN_SRC emacs-lisp
     (use-package gh-md
       :ensure t)
   #+END_SRC
* Install ~AUCTeX~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'auctex)
      (package-install 'auctex))

    ;; As described in https://github.com/jwiegley/use-package/issues/379
    (use-package tex-mode
      :defer t
      :ensure auctex
      :init (progn
              (setq TeX-auto-save t)
              (setq TeX-parse-self t)
              (setq-default TeX-master nil)
              (add-hook 'LaTeX-mode-hook 'visual-line-mode)
              (add-hook 'LaTeX-mode-hook 'flyspell-mode)
              (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
              (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
              (setq reftex-plug-into-AUCTeX t)))
  #+END_SRC
* Install ~org-ref~
  As specified in [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref manual]].
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'org-ref)
      (package-install 'org-ref))

    (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))
    ;; see org-ref for use of these variables
    (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
          org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
          org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")

    (setq bibtex-completion-bibliography "~/Dropbox/bibliography/references.bib"
          bibtex-completion-library-path "~/Dropbox/bibliography/bibtex-pdfs"
          bibtex-completion-notes-path "~/Dropbox/bibliography/helm-bibtex-notes")

    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))

    (defun my/org-ref-open-pdf-at-point ()
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (car (bibtex-completion-find-pdf key))))
        (if (file-exists-p pdf-file)
            (org-open-file pdf-file)
          (message "No PDF found for %s" key))))

    (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)

    (require 'org-ref)


  #+END_SRC
* Install ~undo-tree~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'undo-tree)
      (package-install 'undo-tree))

    (use-package undo-tree
      :ensure t
      :init (global-undo-tree-mode))
  #+END_SRC
* Install ~graphviz-dot-mode~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'graphviz-dot-mode)
      (package-install 'graphviz-dot-mode))

    (use-package graphviz-dot-mode
      :ensure t)
  #+END_SRC
* Install ~beginend~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'beginend)
      (package-install 'beginend))

    (use-package beginend
      :ensure t
      :init (beginend-global-mode))
  #+END_SRC
* Install ~csharp-mode~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'csharp-mode)
      (package-install 'csharp-mode))

    (use-package csharp-mode
      :ensure t
      :init (electric-pair-local-mode 1))
  #+END_SRC
* ~org2blog~ setup
  As seen on [[https://vxlabs.com/2014/05/25/emacs-24-with-prelude-org2blog-and-wordpress/][Publish to WordPress with Emacs 24 and org2blog]]. Also [[https://github.com/org2blog/org2blog][GitHub repo]] of the project.
  #+BEGIN_SRC emacs-lisp
    (mapc #'(lambda (package)
	      (unless (package-installed-p package)
		(package-install package)))
	  '(xml-rpc metaweblog org2blog))

    (setq org-list-allow-alphabetical t)
    (require 'org2blog-autoloads)
    (require 'auth-source)

    (let (credentials)
      ;; only required if your auth file is not already in the list of auth-sources
      ;; (add-to-list 'auth-sources "~/.authinfo")
      (setq credentials (auth-source-user-and-password "repierre"))
      (setq org2blog/wp-blog-alist
	    `(("repierre"
	       :url "https://repierre.wordpress.com/xmlrpc.php"
	       :username ,(car credentials)
	       :password ,(cadr credentials)))))

    (setq org2blog/wp-use-sourcecode-shortcode 't)
    (setq org2blog/wp-sourcecode-default-params nil)
    (setq org2blog/wp-sourcecode-langs
	  '("actionscript3" "bash" "coldfusion" "cpp" "csharp" "css" "delphi"
	    "erlang" "fsharp" "diff" "groovy" "javascript" "java" "javafx" "matlab"
	    "objc" "perl" "php" "text" "powershell" "python" "ruby" "scala" "sql"
	    "vb" "xml"
	    "sh" "emacs-lisp" "lisp" "lua"))
    (setq org-src-fontify-natively t)
  #+END_SRC
* Install ~pdf-tools~
  ~use-package~ example configuring ~pdf-tools~ found [[https://github.com/abo-abo/hydra/wiki/PDF-Tools][here]].
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'pdf-tools)
      (package-install 'pdf-tools))
    (unless (package-installed-p 'org-pdfview)
      (package-install 'org-pdfview))

    (use-package pdf-tools
        :ensure t
        :config
        (pdf-tools-install)
        (setq-default pdf-view-display-size 'fit-page)
        (use-package org-pdfview
          :ensure t))
  #+END_SRC
* Install ~csv-mode~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'csv-mode)
      (package-install 'csv-mode))

    (use-package csv-mode
      :ensure t)
  #+END_SRC
* Install ~projectile~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'projectile)
      (package-install 'projectile))

    (unless (package-installed-p 'helm-projectile)
      (package-install 'helm-projectile))

    (use-package projectile
      :ensure t
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :config
      (progn
	(setq projectile-completion-system 'helm)
	(use-package helm-projectile
	  :ensure t
	  :config (helm-projectile-on))))
  #+END_SRC
* Install ~slack~
  #+BEGIN_SRC emacs-lisp
    (use-package slack
      :ensure t
      :commands (slack-start))
  #+END_SRC
* Install ~sx~ for ~StackExchange~ Q&A
  #+BEGIN_SRC emacs-lisp
    (use-package sx
      :ensure t
      :config
      (bind-keys :prefix "C-c s"
		 :prefix-map my-sx-map
		 :prefix-docstring "Global keymap for SX."
		 ("q" . sx-tab-all-questions)
		 ("i" . sx-inbox)
		 ("o" . sx-open-link)
		 ("u" . sx-tab-unanswered-my-tags)
		 ("a" . sx-ask)
		 ("s" . sx-search)))
  #+END_SRC
