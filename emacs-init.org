#+property: header-args :results silent

* Initialization

Inspired by [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][this config]] and [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][config of angrybacon]].

** Initialize/update package sources

#+begin_src emacs-lisp
  (add-to-list 'package-archives
     	  '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
     	  '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
#+end_src

** Install =use-package=

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
#+end_src

** Install =use-package-ensure-system-package=

#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package
    :ensure t)
#+end_src

* Load custom libraries

** Append additional directories to =load-path=

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "org/lisp" "~/"))
#+end_src

** Add =Romanian standard= input method to Emacs

Emacs comes with two input methods for Romanian: =romanian-alt-prefix= and =romanian-prefix=. However, I'm more accustomed to Romanian standard keyboard layout so I created a =quail= package for it. This will be the default input method.

#+begin_src emacs-lisp
  (require 'quail-romanian-standard)
  (setq default-input-method 'romanian-standard)
#+end_src

** Load utilities library

#+begin_src emacs-lisp
  (require 'rp-utils)
#+end_src

* Basic customization

** Move generated UI code to a separate file

#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+end_src

** Hide the startup message

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Hide the toolbar

#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

** Hide the scroll bar

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

** Change =yes or no= prompts to =y or n=

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Bind =F5= key to =revert-buffer=

#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src

** Wrap long lines

Found on a [[http://stackoverflow.com/a/3282132/844006][StackOverflow answer]].

#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

** Use =ibuffer= for buffer list

As specified in the [[http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet][blog post]] of  Mike Zamansky.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
            ("dired" (mode . dired-mode))
            ("org" (name . "^.*org$"))
            ("web" (or (mode . web-mode)
                       (mode . js2-mode)))
            ("shell" (or (mode . eshell-mode)
                         (mode . shell-mode)))
            ("programming" (or (mode . python-mode)
                               (mode . lisp-mode)
                               (mode . csharp-mode)
                               (mode . js2-mode)))
            ("doc-view" (mode . doc-view-mode))
            ("magit" (name . "^magit[:-].*"))
            ("latex" (or (mode . latex-mode)
                         (mode . bibtex-mode)))
            ("emacs" (or (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
            ("helm" (mode . helm-major-mode))
            ("powershell" (mode . powershell-mode))
            ("ledger" (mode . ledger-mode))
            ("pdf" (mode . pdf-view-mode))
            ("XML" (mode . nxml-mode))))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
         (ibuffer-auto-mode 1)
         (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
#+end_src

** Replace highlighted text

From [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Replacing-highlighted-text.html][Emacs manual]]:

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** Save contents of clipboard before killing text

From [[https://www.reddit.com/r/emacs/comments/30g5wo/the_kill_ring_and_the_clipboard/cpsbbmb/][Reddit comment]]:

#+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+end_src

** Remove scratch message

#+begin_src emacs-lisp
  (setq initial-scratch-message "")
#+end_src

** =dired= tweaks

*** Set =dired-dwim-target=

 #+begin_src emacs-lisp
   (setq dired-dwim-target t)
 #+end_src

*** Human readable file sizes

 From [[http://pragmaticemacs.com/emacs/dired-human-readable-sizes-and-sort-by-size/][Pragmatic Emacs]].

 #+begin_src emacs-lisp
   (setq dired-listing-switches "-alh")
 #+end_src

** End sentences with single space

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

** Display date and time in mode line

#+begin_src emacs-lisp
  (setq display-time-day-and-date t
        display-time-24hr-format t)
  (display-time-mode 1)
#+end_src

** Turn off the error bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Delete trailing whitespace on save

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Expand region around the cursor semantically

#+begin_src emacs-lisp
  (use-package expand-region
    :defer t
    :bind ("C-=" . er/expand-region))
#+end_src

** Unbind =C-z=

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Change start day of the week

#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
#+end_src

** Ask for confirmation before exiting Emacs

#+begin_src emacs-lisp
  (unless (daemonp)
    (setq confirm-kill-emacs 'y-or-n-p))
#+end_src

** Use =Firefox= as the default browser when running in =Windows Subsystem for Linux=

#+begin_src emacs-lisp
  (defun rp/browse-url-firefox(url &rest ARGS)
    "Browse URL using Firefox from Windows when running under WSL.
  This function calls `shell-command' to pass
  URL to the Firefox browser located at
  `/mnt/c/Program\\ Files/Mozilla\\ Firefox/firefox.exe'.

  The second argument ARGS is present to maintain compatibility."
    (progn
      (message "Browsing URL [%s] using external Firefox." url)
      (shell-command
       (concat "/mnt/c/Program\\ Files/Mozilla\\ Firefox/firefox.exe "
          url))))

  (when (rp/running-on-wsl)
    (progn
      (message "Running under WSL. The browse-url-browser-function will be overwritten.")
      (setq browse-url-browser-function 'rp/browse-url-firefox)))
#+end_src

** Change the location of default bookmarks files

#+begin_src emacs-lisp
  (setq bookmark-default-file "~/org/bookmarks"
        eww-bookmarks-directory "~/org/")
#+end_src

** Hide the cursor in inactive windows

#+begin_src emacs-lisp
  (setq-default cursor-in-non-selected-windows nil)
#+end_src

** Add a margin when scrolling vertically

#+begin_src emacs-lisp
  (setq-default scroll-margin 2)
#+end_src

** Set default encoding to =UTF-8=

#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
#+end_src

** Store all backup and autosave files in the =/tmp= directories

Taken from a [[https://old.reddit.com/r/emacs/comments/ym3t77/how_to_delete_auto_save_files_when_quitting_emacs/iv3asi4/][reddit answer]].

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))

  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Start Emacs maximized

#+begin_src emacs-lisp
  (add-to-list 'initial-frame-alist
          '(fullscreen . maximized))
#+end_src

* Themes

** Use =SanityInc= themes

#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :defer t)
#+end_src

** Consider all custom themes to be safe

#+begin_src emacs-lisp
  (setq custom-safe-themes t)
#+end_src

Treating *all* custom themes as being safe seems to be risky. Ideally, I should be able to specify the list of custom themes like this:
#+begin_example
(setq custom-safe-themes
      '("76ddb2e196c6ba8f380c23d169cf2c8f561fd2013ad54b987c516d3cabc00216" ;; sanityinc-tomorrow-day
        "04aa1c3ccaee1cc2b93b246c6fbcd597f7e6832a97aaeac7e5891e6863236f9f" ;; sanityinc-tomorrow-night
        "6fc9e40b4375d9d8d0d9521505849ab4d04220ed470db0b78b700230da0a86c1" ;; sanityinc-tomorrow-eighties
        default))
#+end_example

However, for some reason I can't find right now, specifying the list of custom safe themes doesn't work --- when starting the daemon, I get a prompt whether to load and treat the theme as safe or not, which blocks the startup of the daemon.

** Use =circadian= to switch between dark and light themes

#+begin_src emacs-lisp
  (use-package circadian
    :ensure t
    :after smart-mode-line
    :config
    (if (and
         (bound-and-true-p calendar-latitude)
         (bound-and-true-p calendar-longitude))
        (progn
          (message "Latitude and longitude are set; themes will change according to sunset and sunrise.")
          (setq circadian-themes '((:sunrise . sanityinc-tomorrow-day)
                                   (:sunset . sanityinc-tomorrow-night))))
      (progn
        (message "Latitude and longitude not set; themes will change at 8:00 and 19:30.")
        (setq circadian-themes '(("8:00" . sanityinc-tomorrow-day)
                                 ("19:30" . (sanityinc-tomorrow-night sanityinc-tomorrow-eighties))))))
    (add-hook 'circadian-after-load-theme-hook
              #'(lambda (theme)
                  (sml/apply-theme 'respectful)))
    (circadian-setup))
#+end_src

* Convenience packages
** Install =smart-mode-line=
   For some reason =smart-mode-line= needs to be loaded before =circadian= to avoid a mess in the mode-line.
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :hook
       (after-init . smart-mode-line-enable)
       :config
       (setq sml/no-confirm-load-theme t)
       (setq sml/theme 'respectful)
       (sml/setup))
   #+END_SRC

** Install =nyan-mode=
#+begin_src emacs-lisp
  (use-package nyan-mode
    :after smart-mode-line
    :config
    (nyan-mode 1))
#+end_src
** Install =ace-window=
   From [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#ace-windows-for-easy-window-switching][ace-window for easy window switching]]
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :defer t
       :defer t
       :init
       (progn
	 (global-set-key (kbd "C-x o") 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   #+END_SRC
** Install =undo-tree=
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :defer t
       :defer t
       :init
       (progn
	 (setq undo-tree-history-directory-alist
	       `(("." . ,temporary-file-directory)))
	 (global-undo-tree-mode)))
   #+END_SRC
** Install =which-key=
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer t
       :config
       (which-key-mode))
   #+END_SRC
** Install =try= package
   #+BEGIN_SRC emacs-lisp
   (use-package try
     :defer t)
   #+END_SRC
** Install =beginend=
   #+BEGIN_SRC emacs-lisp
     (when (version<= "25.3" emacs-version)
       (use-package beginend
	 :defer t
	 :defer t
	 :init (beginend-global-mode)))
   #+END_SRC
** Install =atomic-chrome= to edit text areas in Emacs
   [[https://github.com/alpha22jp/atomic-chrome][Atomic chrome]] allows editing text from a text area within browser using Emacs. Since I use Firefox I [[https://github.com/GhostText/GhostText][GhostText extension]] needs to be installed in Firefox in order for this to work.
   #+begin_src emacs-lisp
     (use-package atomic-chrome
       :defer t
       :when (display-graphic-p)
       :config
       (progn
	 (setq atomic-chrome-buffer-open-style 'frame
	     atomic-chrome-url-major-mode-alist '(("github\\.com" . gfm-mode)
						  ("reddit\\.com" . markdown-mode)))
	 (atomic-chrome-start-server)))
   #+end_src
* Helm

** Install =helm=

A merge of configuration from [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]] and  other various sources.

#+begin_src emacs-lisp
  (use-package helm
    :defer t
    :diminish helm-mode
    :init
    (progn
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things relatively quickly.
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      ;; Configuration from https://gist.github.com/m3adi3c/66be1c484d2443ff835b0c795d121ee4#org3ac3590
      (setq helm-split-window-in-side-p t ; open helm buffer inside current window, not occupy whole other window
            helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
            helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.
            helm-scroll-amount 8)	; scroll 8 lines other window using M-<next>/M-<prior>
      )
    :hook (after-init . helm-mode)
    :bind (:map global-map
           ("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x c o" . helm-occur)
           ("C-x c y" . helm-yas-complete)
           ("C-x c Y" . helm-yas-create-snippet-on-region)
           ("C-x c SPC" . helm-all-mark-rings)
           ("C-x C-f" . helm-find-files)
           :map helm-map
           ("TAB" . helm-execute-persistent-action)))
#+end_src

** Install =helm-swoop=

Bindings from [[http://pages.sachachua.com/.emacs.d/Sacha.html#orga9c79c3][Sacha Chua]].

#+begin_src emacs-lisp
  (use-package helm-swoop
    :defer t
    :after helm
    :bind
    (("C-S-s" . helm-swoop)
     ("M-i" .  helm-swoop)
     ("M-s s" . helm-swoop)
     ("M-s M-s" . helm-swoop)
     ("M-I" . helm-swoop-back-to-last-point)
     ("C-c M-i" . helm-multi-swoop)
     ("C-c M-I" . helm-multi-swoop-all)))
#+end_src

** Install =helm-xref=

#+begin_src emacs-lisp
  (use-package helm-xref
    :defer t
    :after helm)
#+end_src

* Git integration
** Utility functions
Define a function to change the spelcheck dictionary to English, and enable the =flyspell-mode= in order to avoid spelling mistakes in commits.
#+begin_src emacs-lisp
  (defun rp/git-commit-setup()
    "Setup the git commit buffer."
    (progn
      (ispell-change-dictionary "en_US")
      (flyspell-mode 1)))
#+end_src
** Install =magit=
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :defer t
       :defer t
       :bind (("C-x g" . magit-status))
       :hook (git-commit-setup . rp/git-commit-setup))
   #+END_SRC

** Install =forge=
   #+begin_src emacs-lisp
     (use-package forge
       :defer t
       :defer t
       :after magit)
   #+end_src
   For some reason, =forge= is unable to generate the token when running under Cygwin. To avoid this issue, just create a =Personal Access Token= in GitHub settings page and store it in the =~/.authinfo= file like this:
   #+begin_example
   machine api.github.com login <username>^forge password <personal token>
   #+end_example
** Install =git-gutter=
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :defer t
       :defer t
       :config
       (global-git-gutter-mode t)
       :diminish git-gutter-mode)
   #+END_SRC
* Completion configuration
** Install =company=
   From [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][Emacs configuration of angrybacon]].
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :defer t
       :config
       (global-company-mode)
       (setq-default
        company-idle-delay .2
        company-minimum-prefix-length 1
        company-require-match nil
        company-tooltip-align-annotations t
        company-show-quick-access t))
   #+END_SRC
** Install =company-quickhelp=
   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :defer t
       :defer t
       :init (with-eval-after-load 'company
	       (company-quickhelp-mode)))
   #+end_src
* Install =csv-mode=
  #+BEGIN_SRC emacs-lisp
    (use-package csv-mode
      :defer t
      :defer t
      :init
      (progn
	(add-hook 'csv-mode-hook 'display-line-numbers-mode)
	(add-hook 'csv-mode-hook 'hl-line-mode)))
  #+END_SRC
* Install =yasnippet=
  #+begin_src emacs-lisp
    (use-package yasnippet
      :defer t
      :config
      (progn
	(use-package yasnippet-snippets :defer t)
	(yas-global-mode 1)))

  #+end_src
* Install =projectile=
  #+begin_src emacs-lisp
    (defun rp/try-activate-virtual-environment()
      "Try to activate the virtual environment.
    The virtual environment is assumed to be located
    in directory .venv under projectile root directory."
      (let* ((project-dir (projectile-project-root))
             (venv-dir (concat project-dir ".venv")))
        (if (file-directory-p venv-dir)
            (progn
              (message (format "Activating virtual environment from %s." venv-dir))
              (pyvenv-activate venv-dir)))))
  #+end_src
  When on =Cygwin= use =native= indexing for =projectile= as mentioned in this [[https://www.quora.com/How-do-I-use-helm-projectile-in-Emacs/answer/Chen-Bin-3][Quora answer]]. It's slower but it does the job.
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :defer t
      :defer t
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (progn
	(add-hook 'magit-mode-hook 'projectile-mode)
	(when (eq system-type 'cygwin)
	  (setq projectile-indexing-method 'native)))
      :hook (projectile-mode . rp/try-activate-virtual-environment)
      :config
      (progn
	(setq projectile-completion-system 'helm)
	(use-package helm-projectile
	  :defer t
	  :config (helm-projectile-on))))
  #+END_SRC
* Install =eldoc=
  #+begin_src emacs-lisp
    (use-package eldoc
      :defer t
      :defer t
      :hook ((emacs-lisp-mode . eldoc-mode)
	     (eval-expression-minibuffer-setup . eldoc-mode)
	     (lisp-mode-interactive-mode . eldoc-mode)
	     (python-mode . eldoc-mode)
	     (eshell-mode . eldoc-mode)
	     (org-mode . eldoc-mode)))
  #+end_src
* Markdown related packages
** Install =markdown-mode=
   As specified in the [[http://jblevins.org/projects/markdown-mode/][documentation]].
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :defer t
       :defer t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("LICENSE" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Install =gh-md=
   #+BEGIN_SRC emacs-lisp
     (use-package gh-md
       :defer t
       :defer t)
   #+END_SRC
* Install =graphviz-dot-mode=
  #+BEGIN_SRC emacs-lisp
    (use-package graphviz-dot-mode
      :defer t
      :defer t)
  #+END_SRC
* Install =pdf-tools=
  =use-package= example configuring =pdf-tools= found [[https://github.com/abo-abo/hydra/wiki/PDF-Tools][here]].
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :defer t
      :config
      (pdf-tools-install)
      (setq-default pdf-view-display-size 'fit-page))
  #+END_SRC
* Install =ledger-mode=
** Prerequisites
   Requires =ledger= to be installed:
   #+BEGIN_SRC shell
     sudo apt-get install ledger
   #+END_SRC
** Setup =ledger-mode=
*** Define function to clean buffer when buffer is in =ledger-mode=
    #+begin_src emacs-lisp
      (defun rp/clean-ledger-buffer()
	(when (equal major-mode 'ledger-mode)
	  (ledger-mode-clean-buffer)))
    #+end_src
*** Install and configure =ledger-mode=
    #+begin_src emacs-lisp
      (use-package ledger-mode
	:defer t
	:defer t
	:config (progn
		  (setq ledger-reconcile-default-commodity "RON")
		  (setq ledger-schedule-file "~/org/financial/ledger-schedule.ledger")
		  (add-hook 'before-save-hook 'rp/clean-ledger-buffer)))
    #+end_src
*** Install and configure =flycheck-ledger=
    #+begin_src emacs-lisp
      (use-package flycheck-ledger
	:defer t
	:defer t
	:hook (ledger-mode . flycheck-mode))
    #+end_src
