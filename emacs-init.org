* Basic customization
** Hide the startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** Load *wombat* theme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'wombat)
   #+END_SRC
** Hide the toolbar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC
** Change ~yes or no~ prompts to ~y or n~
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Bind ~F5~ key to ~revert-buffer~
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC
** Enable line numbers for various modes
   #+BEGIN_SRC emacs-lisp
     ;; python-mode
     (add-hook 'python-mode-hook
               (lambda ()
                 (linum-mode)))

     ;; emacs-lisp mode
     (add-hook 'emacs-lisp-mode-hook
               (lambda ()
                 (linum-mode)))
   #+END_SRC
** Wrap long lines
   Found on a [[http://stackoverflow.com/a/3282132/844006][StackOverflow answer]].
   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode t)
   #+END_SRC
** Enable ~ido~
   #+BEGIN_SRC emacs-lisp
     (require 'ido)
     (ido-mode t)
   #+END_SRC
* Load ~org-babel~ languages
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     (quote org-babel-load-languages)
     (quote ((emacs-lisp . t)
             (dot . t)
             (python . t)
             (gnuplot . t)
             (sh . t)
             (org . t)
             (latex . t))))

  #+END_SRC
* Install ~magit~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'magit)
      (package-install 'magit))
    (use-package magit
      :bind (("C-x g" . magit-status)))
  #+END_SRC
* Install ~helm~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'helm)
      (package-install 'helm))
    (use-package helm
      :bind (("M-x" . helm-M-x)))
  #+END_SRC
* Install ~auto-complete~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'auto-complete)
      (package-install 'auto-complete))

    (use-package auto-complete
      :config (progn
                (ac-config-default)
                (ac-set-trigger-key "TAB")
                (ac-set-trigger-key "<tab>")))
  #+END_SRC
* Install ~flycheck~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'flycheck)
      (package-install 'flycheck))

    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode))
  #+END_SRC
* Install ~ace-window~
  From [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#ace-windows-for-easy-window-switching][ace-window for easy window switching]]
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'ace-window)
      (package-install 'ace-window))

    (use-package ace-window
      :ensure t
      :init
      (progn
        (global-set-key (kbd "M-p") 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
  #+END_SRC
* Install ~elpy~
  Requires the installation of ~elpy, jedi, rope~:
  #+BEGIN_SRC sh
     sudo pip install elpy jedi rope
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'elpy)
      (package-install 'elpy))

    (use-package elpy
      :ensure t
      :init
      (progn
        (elpy-enable)))
  #+END_SRC
* Configure ~jedi~ to use ~python3~
  As specified on [[http://stackoverflow.com/a/17139416/844006][stackoverflow]].
  #+BEGIN_SRC emacs-lisp
    (setq python-shell-interpreter "python3")
  #+END_SRC
* Markdown related packages
** Install ~markdown-mode~
   As specified in the [[http://jblevins.org/projects/markdown-mode/][documentation]].
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'markdown-mode)
       (package-install 'markdown-mode))

     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Install ~gh-md~
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'gh-md)
       (package-install 'gh-md))

     (use-package gh-md
       :ensure t)
   #+END_SRC
