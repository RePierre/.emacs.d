* Custom functions
  #+BEGIN_SRC emacs-lisp
    (defun display-line-numbers()
      (linum-mode))
  #+END_SRC
* Initialization
  Inspired by [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][this config]].
** Initialize/update package sources
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives
		  '("melpa" . "https://melpa.org/packages/") t)
     (add-to-list 'package-archives
		  '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
   #+END_SRC
** Refresh package contents
   #+BEGIN_SRC emacs-lisp
     (package-refresh-contents)
   #+END_SRC
** Install =use-package=
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
   #+END_SRC
** Install =use-package-ensure-system-package=
   #+BEGIN_SRC emacs-lisp
     (use-package use-package-ensure-system-package
       :ensure t)
   #+END_SRC
* Load custom libraries
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  #+END_SRC
** Add =Romanian standard= input method to Emacs
   Emacs comes with two input methods for Romanian: =romanian-alt-prefix= and =romanian-prefix=. However, I'm more accustomed to Romanian standard keyboard layout so I created a =quail= package for it. This will be the default input method.
   #+BEGIN_SRC emacs-lisp
     (require 'quail-romanian-standard)

     (setq default-input-method 'romanian-standard)
   #+END_SRC
* Basic customization
** Move generated UI code to a separate file
   #+BEGIN_SRC emacs-lisp
     (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file t))
   #+END_SRC
** Hide the startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** Hide the toolbar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC
** Hide the scroll bar
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
   #+END_SRC
** Change =yes or no= prompts to =y or n=
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Bind =F5= key to =revert-buffer=
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC
** Enable line numbers for various modes
   #+BEGIN_SRC emacs-lisp
     ;; python-mode
     (add-hook 'python-mode-hook 'display-line-numbers)

     ;; emacs-lisp mode
     (add-hook 'emacs-lisp-mode-hook 'display-line-numbers)
   #+END_SRC
** Wrap long lines
   Found on a [[http://stackoverflow.com/a/3282132/844006][StackOverflow answer]].
   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode t)
   #+END_SRC
** Use =ibuffer= for buffer list
   As specified in the [[http://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet][blog post]] of  Mike Zamansky.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     (setq ibuffer-saved-filter-groups
	   (quote (("default"
		    ("dired" (mode . dired-mode))
		    ("org" (name . "^.*org$"))
		    ("web" (or (mode . web-mode)
			       (mode . js2-mode)))
		    ("shell" (or (mode . eshell-mode)
				 (mode . shell-mode)))
		    ("programming" (or (mode . python-mode)
				       (mode . lisp-mode)
				       (mode . csharp-mode)
				       (mode . js2-mode)))
		    ("doc-view" (mode . doc-view-mode))
		    ("magit" (name . "^magit[:-].*"))
		    ("latex" (or (mode . latex-mode)
				 (mode . bibtex-mode)))
		    ("emacs" (or (name . "^\\*scratch\\*$")
				 (name . "^\\*Messages\\*$")))
		    ("helm" (mode . helm-major-mode))
		    ("powershell" (mode . powershell-mode))
		    ("ledger" (mode . ledger-mode))
		    ("pdf" (mode . pdf-view-mode))
		    ("XML" (mode . nxml-mode))))))
     (add-hook 'ibuffer-mode-hook
	       (lambda ()
		 (ibuffer-auto-mode 1)
		 (ibuffer-switch-to-saved-filter-groups "default")))

     ;; Don't show filter groups if there are no buffers in that group
     (setq ibuffer-show-empty-filter-groups nil)
   #+END_SRC
** Replace highlighted text
   From [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Replacing-highlighted-text.html][Emacs manual]]:
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode 1)
   #+END_SRC
** Save contents of clipboard before killing text
   From [[https://www.reddit.com/r/emacs/comments/30g5wo/the_kill_ring_and_the_clipboard/cpsbbmb/][Reddit comment]]:
   #+BEGIN_SRC emacs-lisp
     (setq save-interprogram-paste-before-kill t)
   #+END_SRC
** Remove scratch message
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message "")
   #+END_SRC
** =dired= tweaks
*** Set =dired-dwim-target=
    #+BEGIN_SRC emacs-lisp
      (setq dired-dwim-target t)
    #+END_SRC
*** Human readable file sizes
    From [[http://pragmaticemacs.com/emacs/dired-human-readable-sizes-and-sort-by-size/][Pragmatic Emacs]].
    #+BEGIN_SRC emacs-lisp
      (setq dired-listing-switches "-alh")
    #+END_SRC
** End sentences with single space
   #+BEGIN_SRC emacs-lisp
     (setq sentence-end-double-space nil)
   #+END_SRC
** Display date and time in mode line
   #+BEGIN_SRC emacs-lisp
     (setq display-time-day-and-date t
           display-time-24hr-format t)
     (display-time-mode 1)
   #+END_SRC
** Turn off the error bell
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Expand region around the cursor semantically
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+END_SRC
** Install =org-bullets=
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :when (display-graphic-p)
       :config
       (setq org-bullets-bullet-list '("âˆ™"))
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
** Unbind <C-z>
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
   #+END_SRC
** Change start day of the week
   #+begin_src emacs-lisp
     (setq calendar-week-start-day 1)
   #+end_src
** Ask for confirmation before exiting Emacs
   #+begin_src emacs-lisp
     (setq confirm-kill-emacs 'y-or-n-p)
   #+end_src
** Show numbers in =company= suggestions
   To select a specific suggestion use =M+<num>=.
   #+begin_src emacs-lisp
     (setq company-show-numbers t)
   #+end_src
** Use =Firefox= as the default browser when running in =Windows Subsystem for Linux=
   In =WSL= the variable =system-type= is set to =gnu/linux= which is the same value for =Ubuntu= so this cannot be used to check if running in =WSL=. Luckily this [[https://emacs.stackexchange.com/a/55295/14110][StackExchange answer]] provides the solution: check for variable =operating-system-release=.
   In =WSL1= its value ends in =-Microsoft= and in =WSL2= it ends in =-microsoft-standard=.
   #+begin_src emacs-lisp
     (defun rp/browse-url-firefox(url &rest args)
       "Browse URL using Firefox from Windows when running under WSL.
     This function calls `shell-command' to pass URL to the Firefox browser located at `/mnt/c/Program\\ Files/Mozilla\\ Firefox/firefox.exe'.
     "
       (progn
	 (message "Browsing URL [%s] using external Firefox." url)
	 (shell-command
	  (concat "/mnt/c/Program\\ Files/Mozilla\\ Firefox/firefox.exe "
		  url))))

     (when (string-match "-[Mm]icrosoft" operating-system-release)
       (progn
	 (message "Running under WSL. The browse-url-browser-function will be overwritten.")
	 (setq browse-url-browser-function 'rp/browse-url-firefox)))
   #+end_src
** Change the location of default bookmarks files
   #+begin_src emacs-lisp
     (setq bookmark-default-file "~/org/bookmarks"
	   eww-bookmarks-directory "~/org/")
   #+end_src
* Themes
** Apply theme
   Use =sanityinc-tomorrow-night= when not running from console; otherwise fallback to =wombat=.
   #+BEGIN_SRC emacs-lisp
     (use-package color-theme-sanityinc-tomorrow
       :ensure t
       :when (display-graphic-p)
       :config (load-theme 'sanityinc-tomorrow-night t))

     (when (not (display-graphic-p))
       (load-theme 'wombat))
   #+END_SRC
** Use =circadian= to switch between dark and light themes
   #+begin_src emacs-lisp
     (use-package circadian
       :ensure t
       :when (display-graphic-p)
       :config
       (if (and
            (bound-and-true-p calendar-latitude)
            (bound-and-true-p calendar-longitude))
         (setq circadian-themes '((:sunrise . sanityinc-tomorrow-day)
                                  (:sunset . sanityinc-tomorrow-night)))
         (setq circadian-themes '(("8:00" . sanityinc-tomorrow-day)
                                  ("19:30" . sanityinc-tomorrow-night))))
       (add-hook 'circadian-after-load-theme-hook
                 #'(lambda (theme)
                     (sml/apply-theme 'respectful)))
       (circadian-setup))
   #+end_src
* Load =org-babel= languages
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     (quote org-babel-load-languages)
     (quote ((emacs-lisp . t)
	     (dot . t)
	     (python . t)
	     (gnuplot . t)
	     (shell . t)
	     (org . t)
	     (latex . t))))

  #+END_SRC
* Convenience packages
** Install =smart-mode-line=
   For some reason =smart-mode-line= needs to be loaded before =circadian= to avoid a mess in the mode-line.
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :ensure t
       :init
       (setq sml/no-confirm-load-theme t)
       (setq sml/theme 'respectful)
       (sml/setup)
       :config
       (use-package nyan-mode
	 :ensure t
	 :when (display-graphic-p)
	 :config
	 (nyan-mode 1)))
   #+END_SRC
** Install =ace-window=
   From [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#ace-windows-for-easy-window-switching][ace-window for easy window switching]]
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :defer t
       :init
       (progn
	 (global-set-key (kbd "C-x o") 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
   #+END_SRC
** Install =undo-tree=
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :defer t
       :init (global-undo-tree-mode))
   #+END_SRC
** Install =which-key=
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode))
   #+END_SRC
** Install =try= package
   #+BEGIN_SRC emacs-lisp
   (use-package try
     :ensure t)
   #+END_SRC
** Install =beginend=
   #+BEGIN_SRC emacs-lisp
     (when (version<= "25.3" emacs-version)
       (use-package beginend
	 :ensure t
	 :defer t
	 :init (beginend-global-mode)))
   #+END_SRC
** Install =atomic-chrome= to edit text areas in Emacs
   [[https://github.com/alpha22jp/atomic-chrome][Atomic chrome]] allows editing text from a text area within browser using Emacs. Since I use Firefox I [[https://github.com/GhostText/GhostText][GhostText extension]] needs to be installed in Firefox in order for this to work.
   #+begin_src emacs-lisp
     (use-package atomic-chrome
       :ensure t
       :when (display-graphic-p)
       :config
       (progn
	 (setq atomic-chrome-buffer-open-style 'frame
	     atomic-chrome-url-major-mode-alist '(("github\\.com" . gfm-mode)
						  ("reddit\\.com" . markdown-mode)))
	 (atomic-chrome-start-server)))
   #+end_src
* Helm
** Install =helm=
   #+BEGIN_SRC emacs-lisp
     ;; A merge of configuration from Sacha Chua http://pages.sachachua.com/.emacs.d/Sacha.html and
     ;; other various sources
     (use-package helm
       :ensure t
       :diminish helm-mode
       :init
       (progn
	 (require 'helm-config)
	 (setq helm-candidate-number-limit 100)
	 ;; From https://gist.github.com/antifuchs/9238468
	 (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
	       helm-input-idle-delay 0.01  ; this actually updates things
					     ; reeeelatively quickly.
	       helm-yas-display-key-on-candidate t
	       helm-quick-update t
	       helm-M-x-requires-pattern nil
	       helm-ff-skip-boring-files t)
	 ;; Configuration from https://gist.github.com/m3adi3c/66be1c484d2443ff835b0c795d121ee4#org3ac3590
	 (setq helm-split-window-in-side-p t ; open helm buffer inside current window, not occupy whole other window
	       helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
	       helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.
	       helm-scroll-amount 8)	; scroll 8 lines other window using M-<next>/M-<prior>
	 (helm-mode)
	 (define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action)
	 (define-key helm-read-file-map (kbd "TAB") 'helm-execute-persistent-action))
       :bind (("C-c h" . helm-mini)
	      ("C-h a" . helm-apropos)
	      ("C-x b" . helm-buffers-list)
	      ("M-y" . helm-show-kill-ring)
	      ("M-x" . helm-M-x)
	      ("C-x c o" . helm-occur)
	      ("C-x c y" . helm-yas-complete)
	      ("C-x c Y" . helm-yas-create-snippet-on-region)
	      ("C-x c SPC" . helm-all-mark-rings)
	      ("C-x C-f" . helm-find-files)))
   #+END_SRC
** Install =helm-swoop=
   Bindings from [[http://pages.sachachua.com/.emacs.d/Sacha.html#orga9c79c3][Sacha Chua]].
   #+BEGIN_SRC emacs-lisp
     (use-package helm-swoop
       :ensure t
       :bind
       (("C-S-s" . helm-swoop)
	("M-i" .  helm-swoop)
	("M-s s" . helm-swoop)
	("M-s M-s" . helm-swoop)
	("M-I" . helm-swoop-back-to-last-point)
	("C-c M-i" . helm-multi-swoop)
	("C-c M-I" . helm-multi-swoop-all)))
   #+END_SRC
** Install =helm-xref=
   #+begin_src emacs-lisp
     (use-package helm-xref
       :ensure t)
   #+end_src
* Git integration
** Install =magit=
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :defer t
       :bind (("C-x g" . magit-status)))
   #+END_SRC
** Install =forge=
   #+begin_src emacs-lisp
     (use-package forge
       :ensure t
       :defer t
       :after magit)
   #+end_src
   For some reason, =forge= is unable to generate the token when running under Cygwin. To avoid this issue, just create a =Personal Access Token= in GitHub settings page and store it in the =~/.authinfo= file like this:
   #+begin_example
   machine api.github.com login <username>^forge password <personal token>
   #+end_example
** Install =git-gutter=
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter
       :ensure t
       :defer t
       :config
       (global-git-gutter-mode t)
       :diminish git-gutter-mode)
   #+END_SRC
* Completion configuration
** Install =company=
   From [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][Emacs configuration of angrybacon]].
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (global-company-mode)
       (setq-default
	company-idle-delay .2
	company-minimum-prefix-length 1
	company-require-match nil
	company-tooltip-align-annotations t))
   #+END_SRC
** Install =company-quickhelp=
   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :ensure t
       :defer t
       :init (with-eval-after-load 'company
	       (company-quickhelp-mode)))
   #+end_src
* Install =csv-mode=
  #+BEGIN_SRC emacs-lisp
    (use-package csv-mode
      :ensure t
      :defer t
      :init
      (add-hook 'csv-mode-hook 'display-line-numbers))
  #+END_SRC
* Install =yasnippet=
  #+begin_src emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (progn
	(use-package yasnippet-snippets :ensure t)
	(yas-global-mode 1)))

  #+end_src
* Install =projectile=
  When on =Cygwin= use =native= indexing for =projectile= as mentioned in this [[https://www.quora.com/How-do-I-use-helm-projectile-in-Emacs/answer/Chen-Bin-3][Quora answer]]. It's slower but it does the job.
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :defer t
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (progn
	(add-hook 'magit-mode-hook 'projectile-mode)
	(when (eq system-type 'cygwin)
	    (setq projectile-indexing-method 'native)))
      :config
      (progn
	(setq projectile-completion-system 'helm)
	(use-package helm-projectile
	  :ensure t
	  :config (helm-projectile-on))))
  #+END_SRC
* Install =eldoc=
  #+begin_src emacs-lisp
    (use-package eldoc
      :ensure t
      :defer t
      :hook ((emacs-lisp-mode . eldoc-mode)
	     (eval-expression-minibuffer-setup . eldoc-mode)
	     (lisp-mode-interactive-mode . eldoc-mode)
	     (python-mode . eldoc-mode)
	     (eshell-mode . eldoc-mode)
	     (org-mode . eldoc-mode)))
  #+end_src
* Programming-related packages
** Install =lsp=
   #+begin_src emacs-lisp
     (defun rp/setup-lsp-mode()
       (progn
	 (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	 (lsp-headerline-breadcrumb-mode)
	 (setq-mode-local prog-mode
			  create-lockfiles nil
			  make-backup-files nil)
	 (message "Variables create-lockfiles and make-backup-files are set to nil in prog-mode.")))

     (use-package lsp-mode
       :ensure t
       :commands (lsp lsp-deferred)
       :hook ((prog-mode . lsp)
	      (lsp-mode . rp/setup-lsp-mode))
       :init (setq lsp-keymap-prefix "C-c l")
       :config (lsp-enable-which-key-integration t))

     (use-package lsp-ui
       :ensure t
       :config
       (setq lsp-ui-doc-max-height 20
	     lsp-ui-doc-max-width 50
	     lsp-ui-sideline-ignore-duplicate t
	     lsp-ui-peek-always-show t)
       :commands lsp-ui-mode)

     (use-package helm-lsp
       :ensure t
       :commands helm-lsp-workspace-symbol)

     (use-package company-lsp
       :disabled
       :ensure t
       :commands (company-lsp))
   #+end_src
** Install =dap-mode=
   #+begin_src emacs-lisp
     (use-package dap-mode
       :ensure t
       :after lsp-mode
       :config (dap-auto-configure-mode))
   #+end_src
** Install =yaml-mode=
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :ensure t)
   #+end_src
** Install =csharp-mode=
   For some reason I get the following error when running Emacs under Ubuntu Bash for Windows: =Error (use-package): csharp-mode/:init: Symbol's function definition is void: electric-pair-local-mode=. As a workaround disable =electric-pair-mode= when =display-graphic-p= returns =nil=.
   #+BEGIN_SRC emacs-lisp
     (use-package csharp-mode
       :ensure t
       :defer t
       :init (when (display-graphic-p)
		 (electric-pair-local-mode 1)))
   #+END_SRC
** Install =php-mode=
   #+begin_src emacs-lisp
     (use-package php-mode
       :ensure t
       :defer t)
   #+end_src
** Install modes for working with =Docker=
   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :ensure t)

     (use-package docker-compose-mode
       :ensure t)
   #+end_src
* Markdown related packages
** Install =markdown-mode=
   As specified in the [[http://jblevins.org/projects/markdown-mode/][documentation]].
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :defer t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Install =gh-md=
   #+BEGIN_SRC emacs-lisp
     (use-package gh-md
       :ensure t
       :defer t)
   #+END_SRC
* Modes for writing
** Install =writeroom-mode=
   #+begin_src emacs-lisp
     (use-package writeroom-mode
       :ensure t
       :bind (("C-c wr" . writeroom-mode)))
   #+end_src
** Install =writegood-mode=
   #+begin_src emacs-lisp
     (use-package writegood-mode
       :ensure t
       :bind (("C-c wg" . writegood-mode)))
   #+end_src
** Install =AUCTeX=
   #+BEGIN_SRC emacs-lisp
     ;; As described in https://github.com/jwiegley/use-package/issues/379
     ;; and also as found in https://www.reddit.com/r/emacs/comments/7ux1qj/using_auctex_mode_to_sync_latex_documents_and/dto2z02/
     (use-package tex-mode
       :defer t
       :ensure auctex
       :init (progn
	       (setq TeX-auto-save t)
	       (setq TeX-parse-self t)
	       (setq-default TeX-master nil)
	       (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
		     TeX-source-correlate-start-server t)
	       (add-hook 'LaTeX-mode-hook 'visual-line-mode)
	       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
	       (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
	       (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
	       (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
	       (setq reftex-plug-into-AUCTeX t)))
   #+END_SRC
*** Install =company-auctex=
    #+begin_src emacs-lisp
      (use-package company-auctex
	:commands (company-auctex
		   company-auctext-labels
		   company-auctest-bibs
		   company-auctex-macros
		   company-auctext-symbols
		   company-auctext-environments)
	:defer t
	:hook
	(tex-mode . (lambda ()
		      (setq-local company-backends '((company-auctex-labels
						      company-auctex-bibs
						      company-auctex-macros
						      company-auctex-environments
						      company-auctex-symbols
						      company-capf))))))
    #+end_src
*** Install =company-math=
    #+begin_src emacs-lisp
      (use-package company-math
	:defer t
	:preface
	(autoload 'company-math-symbols-latex "company-math")
	(autoload 'company-latex-commands "company-math")
	:hook
	(TeX-mode . (lambda ()
		      (setq-local company-backends '((company-math-symbols-latex
						      company-latex-commands
						      company-capf))))))
    #+end_src
** Install =org-re-reveal=
   #+BEGIN_SRC emacs-lisp
     (use-package org-re-reveal
       :ensure t
       :defer t
       :config
       (progn
	 (setq org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")))
   #+END_SRC
* Install =graphviz-dot-mode=
  #+BEGIN_SRC emacs-lisp
    (use-package graphviz-dot-mode
      :ensure t
      :defer t)
  #+END_SRC
* Install =pdf-tools=
  =use-package= example configuring =pdf-tools= found [[https://github.com/abo-abo/hydra/wiki/PDF-Tools][here]].
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :when (display-graphic-p)
      :config
      (pdf-tools-install)
      (setq-default pdf-view-display-size 'fit-page))
  #+END_SRC
* Install =ledger-mode=
** Prerequisites
   Requires =ledger= to be installed:
   #+BEGIN_SRC shell
     sudo apt-get install ledger
   #+END_SRC
** Setup =ledger-mode=
   #+BEGIN_SRC emacs-lisp
     (use-package ledger-mode
       :ensure t
       :defer t
       :config (progn
		 (setq ledger-reconcile-default-commodity "RON")
		 (setq ledger-schedule-file "~/org/financial/ledger-schedule.ledger")))

     (use-package flycheck-ledger
       :ensure t
       :defer t
       :hook (ledger-mode . flycheck-mode))
   #+END_SRC
* Read Web feeds using =elfeed=
  Based on [[https://cestlaz.github.io/posts/using-emacs-29-elfeed/][blog post of Mike Zamansky]].
  #+BEGIN_SRC emacs-lisp
    (setq elfeed-db-directory "~/org/elfeed/elfeed-db")

    (defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))

    (defun elfeed-load-db-and-open ()
      "Wrapper to load the elfeed database from disk before opening."
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force))

    (defun elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed database to disk before burying buffer."
      (interactive)
      (elfeed-db-save)
      (quit-window))

    (use-package elfeed
      :ensure t
      :bind (:map elfeed-search-mode-map
		  ("q" . elfeed-save-db-and-bury)
		  ("A" . elfeed-mark-all-as-read)))

    (use-package elfeed-goodies
      :ensure t
      :config
      (elfeed-goodies/setup)
      (setq elfeed-goodies/entry-pane-position :bottom))

    (use-package elfeed-org
      :ensure t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/org/elfeed/elfeed.org")))
  #+END_SRC
